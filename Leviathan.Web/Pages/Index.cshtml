@page
@using Leviathan.Core.Localization
@model IndexModel
@{
    ViewData["Title"] = "Leviathan";
}

<div class="text-center">
    <div style="margin-top: 40px">
        <h1>@this.Model._localizedIndexInstructionHeader</h1>
        @foreach (var instruction in this.Model._localizedIndexInstructionText)
        {
            <h6>@instruction</h6>
        }
    </div>

    <div style="margin-top: 40px" class="img-group" role="group">
        <input type="image" src="img/discord-sso.png" alt="Login with Discord"
                     onclick="popupWindow('@this.Model._discordButtonLink', 'discord', window, 600, 800);" style="border-radius: 3px;"/>
        <input type="image" src="img/eve-sso.png" alt="Login with EVE Online"
             onclick="popupWindow('@this.Model._eveButtonLink', 'eve', window, 800, 800);"/>
    </div>
    <div style="margin-top: 40px">
        <a href="/proceed?state=@this.Model._state">
            <button type="button" class="btn btn-success btn-lg">Proceed</button>
        </a>
    </div>
</div>

@section Scripts
{
    <script>
    function popupWindow(url, windowName, win, w, h) {
        const y = win.top.outerHeight / 2 + win.top.screenY - ( h / 2);
        const x = win.top.outerWidth / 2 + win.top.screenX - ( w / 2);
        return win.open(url, windowName, `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w}, height=${h}, top=${y}, left=${x}`);
    }
    </script>
}